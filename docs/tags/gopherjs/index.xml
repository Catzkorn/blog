<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gopherjs on Go Ahead</title>
    <link>https://jbrandhorst.com/tags/gopherjs/</link>
    <description>Recent content in Gopherjs on Go Ahead</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jbrandhorst.com/tags/gopherjs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GopherJS Client and gRPC Server - Part 4</title>
      <link>https://jbrandhorst.com/post/gopherjs-client-grpc-server-4/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jbrandhorst.com/post/gopherjs-client-grpc-server-4/</guid>
      <description>Putting it all together As we touched upon earlier, we generate a package from the generated JS (meta, right?), which can be served from the server. We&amp;rsquo;ll create a new file, main.go, in which we can spin up a server, serve the frontend and the gRPC backend.
Much of the logic in this file is inspired by the excellent blog post put together by Brandon Philips over at CoreOS. We&amp;rsquo;re using his elegant solution to serve both the HTTP API and the gRPC API on the same port.</description>
    </item>
    
    <item>
      <title>GopherJS Client and gRPC Server - Part 3</title>
      <link>https://jbrandhorst.com/post/gopherjs-client-grpc-server-3/</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jbrandhorst.com/post/gopherjs-client-grpc-server-3/</guid>
      <description>Implement the client GopherJS can be used in a couple of different ways, and there&amp;rsquo;s a couple of different bindings to many popular JavaScript frameworks. The GopherJS wiki has some great resources.
I tried a couple of different ones and ended up using the VueJS bindings because it made it easy to prototype things quickly. I hear VueJS works well for many JS evangelisers out there, but I&amp;rsquo;ve only used it with small projects.</description>
    </item>
    
    <item>
      <title>GopherJS Client and gRPC Server - Part 2</title>
      <link>https://jbrandhorst.com/post/gopherjs-client-grpc-server-2/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jbrandhorst.com/post/gopherjs-client-grpc-server-2/</guid>
      <description>Implement the server I like to start by creating a struct and write a simple definition that&amp;rsquo;ll immediately fail to compile.
package server import ( &amp;quot;github.com/johanbrandhorst/gopherjs-grpc-websocket/protos/server&amp;quot; ) type Server struct{} var _ server.MyServerServer = &amp;amp;Server{}  This won&amp;rsquo;t compile, because the Server struct does not implement the server.MyServerServer interface. But it&amp;rsquo;ll also tell us what we&amp;rsquo;ve got left to implement. So lets implement the server methods:
func (s Server) Simple(ctx context.</description>
    </item>
    
    <item>
      <title>GopherJS Client and gRPC Server - Part 1</title>
      <link>https://jbrandhorst.com/post/gopherjs-client-grpc-server-1/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jbrandhorst.com/post/gopherjs-client-grpc-server-1/</guid>
      <description>Create the protobuf interface We&amp;rsquo;ll start by creating a folder for the package we want to create. Lets call it server. Next we type up a .proto file to define the interface between the server and the client. We&amp;rsquo;ll have to include some extra proto annotations in order to have the gRPC-gateway generate the translations methods we need. Lets define a simple service with a single HTTP GET endpoint:</description>
    </item>
    
    <item>
      <title>GopherJS Client and gRPC Server - Introduction</title>
      <link>https://jbrandhorst.com/post/gopherjs-client-grpc-server/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jbrandhorst.com/post/gopherjs-client-grpc-server/</guid>
      <description>I&amp;rsquo;ve been using gRPC and Go a lot in the last year. At Cognitive Logic every one of our backend services is implemented with Go and gRPC, and it enables us to abstract away most of the complexities of networked micro services and keep interfaces typed and well defined using Google protobuffers.
I really enjoy using both, but sometimes I need to write a frontend to a web server and I despise writing Javascript.</description>
    </item>
    
  </channel>
</rss>